{"version":3,"sources":["components/LockForm.tsx","components/Welcome.tsx","components/UploadForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DepositForm","onSubmit","type","name","onClick","e","preventDefault","Welcome","href","target","rel","UploadForm","inProgress","useState","file","setFile","id","onChange","event","files","className","undefined","App","network","wallet","api","address","uploads","setUploads","uploading","setUploading","deposit","setDeposit","netIdent","setIdent","netToken","setToken","conn","setConn","useEffect","hasDeposit","then","addDeposit","catch","err","alert","message","store","request","cid","releaseDeposit","window","location","reload","map","u","navigator","clipboard","writeText","status","status_code","console","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SUPPORTED_NETWORKS","SUPPORTED_NETWORK_LONG","a","ethereum","Error","enable","provider","providers","Web3Provider","getSigner","getNetwork","indexOf","init","getAddress","initEthConnection","props","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a047e578.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\ninterface Props {\n  onSubmit: () => void;\n}\n\nexport default function DepositForm({ onSubmit }: Props): ReactElement {\n  return (\n    <form>\n      <button\n        type=\"button\"\n        name=\"deposit\"\n        onClick={e => {\n          e.preventDefault();\n          onSubmit();\n        }}\n      >\n        Deposit\n      </button>\n    </form>\n  );\n}\n","import React, { ReactElement } from \"react\";\n\nexport default function Welcome(): ReactElement {\n  return (\n    <div>\n      <p>\n        This app demonstrates the client-side usage of{\" \"}\n        <a href=\"https://near.storage\" target=\"_blank\" rel=\"noreferrer\">\n          the NEAR to Filecoin bridge\n        </a>\n        , allowing{\" \"}\n        <a href=\"https://near.org\" target=\"_blank\" rel=\"noreferrer\">\n          NEAR\n        </a>{\" \"}\n        users to store data on the{\" \"}\n        <a href=\"https://filecoin.io\" target=\"_blank\" rel=\"noreferrer\">\n          Filecoin\n        </a>{\" \"}\n        network.\n      </p>\n      <p>\n        This is version 0 of the demo app. You can deposit and release funds,\n        query for the status of a \"file\" or deal, and more. This is a beta\n        release demo, do not store personal, encrypted, or illegal data. Data\n        will not be available permanently on either Filecoin or IPFS. See the{\" \"}\n        <a href=\"https://near.storage/terms\" target=\"_blank\" rel=\"noreferrer\">\n          terms of service\n        </a>{\" \"}\n        before using the demo.\n      </p>\n      <p>Go ahead and sign in to try it out!</p>\n    </div>\n  );\n}\n","import React, { useState, ReactElement } from \"react\";\n\ninterface Props {\n  inProgress: boolean;\n  onSubmit: (file: File) => void;\n}\n\nexport default function UploadForm({\n  inProgress,\n  onSubmit\n}: Props): ReactElement {\n  const [file, setFile] = useState<File>();\n  return (\n    <form>\n      <fieldset id=\"fieldset\">\n        <input\n          type=\"file\"\n          name=\"file\"\n          onChange={event => {\n            if (event.target.files) setFile(event.target.files[0]);\n          }}\n        ></input>\n        <button\n          type=\"button\"\n          name=\"upload\"\n          className={inProgress === true ? \"loading\" : \"\"}\n          onClick={e => {\n            e.preventDefault();\n            if (file) onSubmit(file);\n            setFile(undefined);\n          }}\n        >\n          Upload\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n","import \"regenerator-runtime/runtime\";\nimport { useState, ReactElement, useEffect } from \"react\";\nimport Form from \"./components/LockForm\";\nimport Welcome from \"./components/Welcome\";\nimport Upload from \"./components/UploadForm\";\nimport { providers, Signer, BigNumber } from \"ethers\";\nimport { CoreAPI, Request } from \"@textile/eth-storage\";\n\ninterface Props {\n  network: providers.Network;\n  api: CoreAPI<BigNumber>;\n  wallet: Signer;\n  address: string;\n}\n\nconst App = ({ network, wallet, api, address }: Props): ReactElement => {\n  const [uploads, setUploads] = useState<Array<Request>>([]);\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [deposit, setDeposit] = useState<boolean>(false);\n  const [netIdent, setIdent] = useState<string>(\"\");\n  const [netToken, setToken] = useState<string>(\"\");\n  const [conn, setConn] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (wallet) {\n      api.hasDeposit().then(setDeposit);\n    }\n    if (network && network.name) {\n      switch (network.name) {\n        case \"matic\":\n          setIdent(\"Polygon\");\n          setToken(\"MATIC\");\n          setConn(\"Polygon Mainnet\");\n          break;\n        case \"maticmum\":\n          setIdent(\"Polygon\");\n          setToken(\"MATIC\");\n          setConn(\"Polygon Mumbai\");\n          break;\n        case \"rinkeby\":\n          setIdent(\"Ethereum\");\n          setToken(\"Îž\");\n          setConn(\"Ethereum Rinkeby\");\n          break;\n        default:\n          setIdent(\"\");\n          setToken(\"\");\n      }\n    }\n  }, [wallet, api, network]);\n\n  const onUpload = (file: File) => {\n    setUploading(true);\n    api\n      .store(file)\n      .then(request => {\n        setUploads([...uploads, request]);\n        setUploading(false);\n        alert(`IPFS CID:\\n${request.cid[\"/\"]}`);\n      })\n      .catch((err: Error) => {\n        setUploading(false);\n        alert(err.message);\n      });\n  };\n\n  const onStatus = (id: string) => {\n    if (id) {\n      api\n        .status(id)\n        .then(({ request }) => {\n          alert(`Filecoin deal status: \"${request.status_code}\"!`);\n        })\n        .catch((err: Error) => alert(err.message));\n    } else {\n      console.warn(\"no 'active' file, upload a file first\");\n    }\n  };\n\n  const onSubmit = () => {\n    api\n      .addDeposit()\n      .then(() => setDeposit(true))\n      .catch((err: Error) => alert(err.message));\n  };\n\n  return (\n    <main>\n      <header>\n        <h1>Textile {`${netIdent}`} Storage Demo</h1>\n      </header>\n      <p>\n        {deposit\n          ? `You got ${netToken} in here!`\n          : `Deposit some funds, ${address}!`}\n      </p>\n      {address ? (\n        <div>\n          <Form onSubmit={onSubmit} />\n          {deposit ? (\n            <Upload onSubmit={onUpload} inProgress={uploading} />\n          ) : null}\n          <button\n            type=\"button\"\n            name=\"release\"\n            onClick={e => {\n              e.preventDefault();\n              api\n                .releaseDeposit()\n                .then(() => {\n                  alert(\n                    \"if your session is over, your funds should be returned\"\n                  );\n                  // Auto-refresh the page\n                  window.location.reload();\n                })\n                .catch((err: Error) => alert(err.message));\n            }}\n          >\n            Release\n          </button>\n          <br />\n          {uploads && <h2>Your uploads</h2>}\n          {uploads.map((u: Request) => {\n            return (\n              <p>\n                {u.cid[\"/\"]}\n                <br />\n                <button\n                  type=\"button\"\n                  name=\"copy\"\n                  onClick={e => {\n                    e.preventDefault();\n                    navigator.clipboard.writeText(u.cid[\"/\"]);\n                  }}\n                >\n                  Copy CID\n                </button>\n                <button\n                  type=\"button\"\n                  name=\"status\"\n                  onClick={e => {\n                    e.preventDefault();\n                    onStatus(u.id);\n                  }}\n                >\n                  Status\n                </button>\n                <br />\n              </p>\n            );\n          })}\n          <br />\n          <p>\n            <i>\n              {`You are connected on ${conn}. Try this demo on Ethereum Rinkeby, Polygon Mumbai, or Polygon Mainnet.`}\n            </i>\n          </p>\n        </div>\n      ) : (\n        <Welcome />\n      )}\n    </main>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/// <reference lib=\"dom\" />\n\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\nimport { providers } from \"ethers\";\nimport { init } from \"@textile/eth-storage\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.scss\";\n\ndeclare global {\n  interface Window {\n    ethereum: providers.ExternalProvider;\n  }\n}\n\nconst SUPPORTED_NETWORKS = [\"matic\", \"maticmum\", \"rinkeby\"];\nconst SUPPORTED_NETWORK_LONG =\n  \"Matic Mainnet, Matic Mumbai, and Ethereum Rinkeby\";\n\nasync function initEthConnection() {\n  if (!window.ethereum) {\n    throw new Error(\n      \"No web3 provider found. Please install metamask browser extension.\"\n    );\n  }\n  await (window.ethereum as any).enable();\n  const provider = new providers.Web3Provider(window.ethereum);\n  const wallet = provider.getSigner();\n\n  const network = await provider.getNetwork();\n\n  if (SUPPORTED_NETWORKS.indexOf(network.name) === -1) {\n    throw new Error(\n      `Only ${SUPPORTED_NETWORK_LONG} networks are currently supported. Switch your wallet connection and refresh the webpage.`\n    );\n  }\n  const api = await init(wallet);\n  const address = await wallet.getAddress();\n\n  return { network, api, wallet, address };\n}\n\ninitEthConnection()\n  .then(props => {\n    ReactDOM.render(<App {...props} />, document.getElementById(\"root\"));\n  })\n  .catch(err => {\n    alert(err.message);\n  });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}