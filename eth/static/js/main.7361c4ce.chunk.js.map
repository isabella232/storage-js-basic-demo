{"version":3,"sources":["components/LockForm.tsx","components/Welcome.tsx","components/UploadForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DepositForm","onSubmit","type","name","onClick","e","preventDefault","Welcome","href","target","rel","UploadForm","inProgress","useState","file","setFile","id","onChange","event","files","className","undefined","App","network","wallet","api","address","uploads","setUploads","uploading","setUploading","deposit","setDeposit","netIdent","setIdent","netToken","setToken","conn","setConn","useEffect","hasDeposit","then","addDeposit","catch","err","alert","message","store","request","cid","releaseDeposit","window","location","reload","map","u","navigator","clipboard","writeText","status","status_code","console","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SUPPORTED_NETWORKS","SUPPORTED_NETWORK_LONG","a","ethereum","Error","enable","provider","providers","Web3Provider","getSigner","getNetwork","indexOf","init","getAddress","initEthConnection","props","ReactDOM","render","document","getElementById"],"mappings":"2PAMe,SAASA,EAAT,GAAyD,IAAlCC,EAAiC,EAAjCA,SACpC,OACE,+BACE,wBAAQC,KAAK,SAASC,KAAK,UAAUC,QAAS,SAACC,GAC7CA,EAAEC,iBACFL,KAFF,uBCPS,SAASM,IACtB,OACE,gCACE,gFACmD,mBAAGC,KAAK,uBAAuBC,OAAO,SAASC,IAAI,aAAnD,yCADnD,cAC6J,mBAAGF,KAAK,mBAAmBC,OAAO,SAASC,IAAI,aAA/C,kBAD7J,+BAC6P,mBAAGF,KAAK,sBAAsBC,OAAO,SAASC,IAAI,aAAlD,sBAD7P,eAGA,sTAEmN,mBAAGF,KAAK,6BAA6BC,OAAO,SAASC,IAAI,aAAzD,8BAFnN,6BAIA,uECLS,SAASC,EAAT,GAAoE,IAA9CC,EAA6C,EAA7CA,WAAYX,EAAiC,EAAjCA,SAC/C,EAAwBY,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,+BACE,2BAAUC,GAAG,WAAb,UACE,uBAAOd,KAAK,OAAOC,KAAK,OAAOc,SAAU,SAACC,GACpCA,EAAMT,OAAOU,OACfJ,EAAQG,EAAMT,OAAOU,MAAM,OAE/B,wBAAQjB,KAAK,SAASC,KAAK,SAASiB,WAAwB,IAAbR,EAAoB,UAAY,GAAIR,QAAS,SAACC,GAC3FA,EAAEC,iBACEQ,GAAMb,EAASa,GACnBC,OAAQM,IAHV,yBCDR,IA6HeC,EA7HH,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,QACnC,EAA8Bb,mBAAyB,IAAvD,mBAAOc,EAAP,KAAgBC,EAAhB,KACA,EAAkCf,oBAAkB,GAApD,mBAAOgB,EAAP,KAAkBC,EAAlB,KACA,EAA8BjB,oBAAkB,GAAhD,mBAAOkB,EAAP,KAAgBC,EAAhB,KACA,EAA6BnB,mBAAiB,IAA9C,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAA6BrB,mBAAiB,IAA9C,mBAAOsB,EAAP,KAAiBC,EAAjB,KACA,EAAwBvB,mBAAiB,IAAzC,mBAAOwB,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WAIR,GAHIf,GACFC,EAAIe,aAAaC,KAAKT,GAEpBT,GAAWA,EAAQpB,KACrB,OAAOoB,EAAQpB,MACb,IAAK,QACH+B,EAAS,WACTE,EAAS,SACTE,EAAQ,mBACR,MACF,IAAK,WACHJ,EAAS,WACTE,EAAS,SACTE,EAAQ,kBACR,MACF,IAAK,UACHJ,EAAS,YACTE,EAAS,UACTE,EAAQ,oBACR,MACF,QACEJ,EAAS,IACTE,EAAS,OAGd,CAACZ,EAAQC,EAAKF,IAkCjB,OACE,iCACE,iCACE,oDAAgBU,GAAhB,qBAEF,4BACGF,EAAO,kBAAcI,EAAd,2CAA2DT,EAA3D,OAETA,EACI,gCACD,cAAC,EAAD,CAAMzB,SAhBG,WACfwB,EAAIiB,aACDD,MAAK,kBAAMT,GAAW,MACtBW,OAAM,SAACC,GAAD,OAAgBC,MAAMD,EAAIE,eAc5Bf,EAAU,cAAC,EAAD,CAAQ9B,SA3CV,SAACa,GAChBgB,GAAa,GACbL,EAAIsB,MAAMjC,GACP2B,MAAK,SAACO,GACLpB,EAAW,GAAD,mBAAKD,GAAL,CAAcqB,KACxBlB,GAAa,GACbe,MAAM,cAAD,OAAeG,EAAQC,IAAI,UAEjCN,OAAM,SAACC,GACNd,GAAa,GACbe,MAAMD,EAAIE,aAiC+BlC,WAAYiB,IAAgB,KACnE,wBAAQ3B,KAAK,SAASC,KAAK,UAAUC,QAAS,SAACC,GAC7CA,EAAEC,iBACFmB,EAAIyB,iBACDT,MAAK,WACJI,MAAM,0DAENM,OAAOC,SAASC,YAEjBV,OAAM,SAACC,GAAD,OAAgBC,MAAMD,EAAIE,aARrC,qBAWA,uBACCnB,GAAW,8CACXA,EAAQ2B,KAAI,SAACC,GACZ,OAAO,8BACJA,EAAEN,IAAI,KACP,uBACA,wBAAQ/C,KAAK,SAASC,KAAK,OAAOC,QAAS,SAACC,GAC1CA,EAAEC,iBACFkD,UAAUC,UAAUC,UAAUH,EAAEN,IAAI,OAFtC,sBAMA,wBAAQ/C,KAAK,SAASC,KAAK,SAASC,QAAS,SAACC,GArDzC,IAACW,EAsDJX,EAAEC,kBAtDEU,EAuDKuC,EAAEvC,IArDrBS,EAAIkC,OAAO3C,GACRyB,MAAK,YAAkB,IAAfO,EAAc,EAAdA,QACPH,MAAM,0BAAD,OAA2BG,EAAQY,YAAnC,UAENjB,OAAM,SAACC,GAAD,OAAgBC,MAAMD,EAAIE,YAEnCe,QAAQC,KAAK,0CA6CL,oBAMA,6BAGJ,uBACA,4BACE,2DAC2BzB,EAD3B,mFAKA,cAAC9B,EAAD,Q,iCCxHGwD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCMRO,G,OAAqB,CAAC,QAAS,WAAY,YAC3CC,EAAyB,oD,4CAE/B,oCAAAC,EAAA,yDACOtB,OAAOuB,SADd,sBAEU,IAAIC,MAAM,sEAFpB,uBAISxB,OAAOuB,SAAiBE,SAJjC,cAKQC,EAAW,IAAIC,YAAUC,aAAa5B,OAAOuB,UAC7ClD,EAASqD,EAASG,YAN1B,SAQwBH,EAASI,aARjC,UAQQ1D,EARR,QAUoD,IAA9CgD,EAAmBW,QAAQ3D,EAAQpB,MAVzC,uBAWU,IAAIwE,MAAJ,eAAkBH,EAAlB,8FAXV,yBAaoBW,YAAK3D,GAbzB,eAaQC,EAbR,iBAcwBD,EAAO4D,aAd/B,eAcQ1D,EAdR,yBAgBS,CAAEH,UAASE,MAAKD,SAAQE,YAhBjC,6C,kEAmBA2D,GACG5C,MAAK,SAAC6C,GACLC,IAASC,OACP,cAAC,EAAD,eACMF,IAENG,SAASC,eAAe,YAG3B/C,OAAM,SAACC,GACNC,MAAMD,EAAIE,YAOdiB,M","file":"static/js/main.7361c4ce.chunk.js","sourcesContent":["import React, { ReactElement} from 'react';\n\ninterface Props {\n  onSubmit: () => void,\n}\n\nexport default function DepositForm({ onSubmit }: Props): ReactElement {\n  return (\n    <form>\n      <button type=\"button\" name=\"deposit\" onClick={(e) => {\n        e.preventDefault();\n        onSubmit();\n      }}>\n        Deposit\n      </button>\n    </form>\n  );\n}\n","import React, { ReactElement } from 'react';\n\nexport default function Welcome(): ReactElement {\n  return (\n    <div>\n      <p>\n          This app demonstrates the client-side usage of <a href=\"https://near.storage\" target=\"_blank\" rel=\"noreferrer\">the NEAR to Filecoin bridge</a>, allowing <a href=\"https://near.org\" target=\"_blank\" rel=\"noreferrer\">NEAR</a> users to store data on the <a href=\"https://filecoin.io\" target=\"_blank\" rel=\"noreferrer\">Filecoin</a> network. \n      </p>\n      <p>\n          This is version 0 of the demo app. You can deposit and release funds,\n          query for the status of a \"file\" or deal, and more. This is a beta release demo, do not store personal, encrypted, or illegal data. Data will not be available permanently on either Filecoin or IPFS. See the <a href=\"https://near.storage/terms\" target=\"_blank\" rel=\"noreferrer\">terms of service</a> before using the demo.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </div>\n  );\n}\n","import React, { useState, ReactElement } from 'react';\n\ninterface Props {\n  inProgress: boolean\n  onSubmit: (file: File) => void;\n}\n\nexport default function UploadForm({ inProgress, onSubmit }: Props): ReactElement {\n  const [file, setFile] = useState<File>();\n  return (\n    <form>\n      <fieldset id=\"fieldset\">\n        <input type=\"file\" name=\"file\" onChange={(event) => {\n          if (event.target.files)\n            setFile(event.target.files[0]);\n        }}></input>\n        <button type=\"button\" name=\"upload\" className={inProgress===true ? \"loading\" : \"\"} onClick={(e) => {\n          e.preventDefault();\n          if (file) onSubmit(file);\n          setFile(undefined);\n        }}>\n          Upload\n        </button>\n      </fieldset>\n    </form>\n  );\n}","import 'regenerator-runtime/runtime';\nimport { useState, ReactElement, useEffect } from 'react';\nimport Form from './components/LockForm';\nimport Welcome from './components/Welcome';\nimport Upload from \"./components/UploadForm\";\nimport { providers, Signer } from \"ethers\"\nimport { CoreAPI, Request } from \"@textile/eth-storage\"\n\ninterface Props {\n  network: providers.Network\n  api: CoreAPI\n  wallet: Signer\n  address: string\n}\n\nconst App = ({ network, wallet, api, address }: Props): ReactElement => {\n  const [uploads, setUploads] = useState<Array<Request>>([]);\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [deposit, setDeposit] = useState<boolean>(false);\n  const [netIdent, setIdent] = useState<string>(\"\");\n  const [netToken, setToken] = useState<string>(\"\");\n  const [conn, setConn] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (wallet) {\n      api.hasDeposit().then(setDeposit)\n    }\n    if (network && network.name) {\n      switch(network.name) {\n        case \"matic\":\n          setIdent(\"Polygon\")\n          setToken(\"MATIC\")\n          setConn(\"Polygon Mainnet\")\n          break;\n        case \"maticmum\":\n          setIdent(\"Polygon\")\n          setToken(\"MATIC\")\n          setConn(\"Polygon Mumbai\")\n          break;\n        case \"rinkeby\":\n          setIdent(\"Ethereum\")\n          setToken(\"Îž\")\n          setConn(\"Ethereum Rinkeby\")\n          break;\n        default:\n          setIdent(\"\")\n          setToken(\"\")\n      }\n    }\n  }, [wallet, api, network])\n\n  const onUpload = (file: File) => {\n    setUploading(true)\n    api.store(file)\n      .then((request) => {\n        setUploads([...uploads, request])\n        setUploading(false)\n        alert(`IPFS CID:\\n${request.cid[\"/\"]}`)\n      })\n      .catch((err: Error) => {\n        setUploading(false)\n        alert(err.message)\n      });\n  }\n\n  const onStatus = (id: string) => {\n    if (id) {\n      api.status(id)\n        .then(({ request }) => {\n          alert(`Filecoin deal status: \"${request.status_code}\"!`);\n        })\n        .catch((err: Error) => alert(err.message));\n    } else {\n      console.warn(\"no 'active' file, upload a file first\")\n    }\n  }\n\n  const onSubmit = () => {\n    api.addDeposit()\n      .then(() => setDeposit(true))\n      .catch((err: Error) => alert(err.message));\n  };\n\n  return (\n    <main>\n      <header>\n        <h1>Textile {`${netIdent}`} Storage Demo</h1>\n      </header>\n      <p>\n        {deposit ? `You got ${netToken} in here!` : `Deposit some funds, ${address}!`}\n      </p>\n      {address\n        ? (<div>\n          <Form onSubmit={onSubmit} />\n          {deposit ? <Upload onSubmit={onUpload} inProgress={uploading} /> : null}\n          <button type=\"button\" name=\"release\" onClick={(e) => {\n            e.preventDefault();\n            api.releaseDeposit()\n              .then(() => {\n                alert(\"if your session is over, your funds should be returned\");\n                // Auto-refresh the page\n                window.location.reload();\n              })\n              .catch((err: Error) => alert(err.message));\n          }}>Release\n          </button>\n          <br />\n          {uploads && <h2>Your uploads</h2>}\n          {uploads.map((u: Request) => {\n            return <p>\n              {u.cid[\"/\"]}\n              <br />\n              <button type=\"button\" name=\"copy\" onClick={(e) => {\n                e.preventDefault();\n                navigator.clipboard.writeText(u.cid[\"/\"])\n              }}>\n                Copy CID\n              </button>\n              <button type=\"button\" name=\"status\" onClick={(e) => {\n                e.preventDefault();\n                onStatus(u.id);\n              }}>\n                Status\n              </button>\n              <br />\n            </p>\n          })}\n          <br/>\n          <p>\n            <i>\n              {`You are connected on ${conn}. Try this demo on Ethereum Rinkeby, Polygon Mumbai, or Polygon Mainnet.`}\n            </i>\n          </p>\n        </div>\n        ) : <Welcome />\n      }\n    </main>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/// <reference lib=\"dom\" />\n\nimport App from \"./App\"\nimport ReactDOM from \"react-dom\";\nimport { providers } from \"ethers\";\nimport { init } from \"@textile/eth-storage\";\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"./index.scss\";\n\ndeclare global {\n  interface Window {\n    ethereum: providers.ExternalProvider\n  }\n}\n\nconst SUPPORTED_NETWORKS = ['matic', 'maticmum', 'rinkeby']\nconst SUPPORTED_NETWORK_LONG = 'Matic Mainnet, Matic Mumbai, and Ethereum Rinkeby'\n\nasync function initEthConnection() {\n  if (!window.ethereum) {\n    throw new Error(\"No web3 provider found. Please install metamask browser extension.\")\n  }\n  await (window.ethereum as any).enable();\n  const provider = new providers.Web3Provider(window.ethereum);\n  const wallet = provider.getSigner();\n\n  const network = await provider.getNetwork();\n\n  if (SUPPORTED_NETWORKS.indexOf(network.name) === -1) {\n    throw new Error(`Only ${SUPPORTED_NETWORK_LONG} networks are currently supported. Switch your wallet connection and refresh the webpage.`)\n  }\n  const api = await init(wallet);\n  const address = await wallet.getAddress();\n\n  return { network, api, wallet, address }\n}\n\ninitEthConnection()\n  .then((props) => {\n    ReactDOM.render(\n      <App\n        {...props}\n      />,\n      document.getElementById('root')\n    );\n  })\n  .catch((err) => {\n    alert(err.message)\n  });\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}